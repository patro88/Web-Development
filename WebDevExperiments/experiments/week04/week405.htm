<!DOCTYPE html>
<html>
<head>
    <title> Angular JS - Some new Features </title>
    <link rel="stylesheet" href="../css/week401.css" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="http://getbootstrap.com/assets/css/docs.min.css">

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.13/angular.min.js"></script>
    <script src="../js/week34.js"></script>


</head>
<body ng-app="oneTimeBidingExampleApp">
    <div class="container">
        <h1> Angular JS - Some new features</h1>
        <hr />
        <h2> Description: </h2>
        <p>
            In this experiment I tried some new stuff that is not yet taught in the class. I learnt a lot during this experiment. 
            I have worked on one time binding which is a cool concept. I also tried exploring filters more. 
            I did two experiments , one with normal filtering and the other with customized filters.

        </p>
        <hr />
        <div>
            <h3>One time Binding</h3>

            <div ng-controller="EventController">
                <button ng-click="clickMe($event)">Click Me</button>
                <p id="one-time-binding-example">One time binding: {{::name}}</p>
                <p id="normal-binding-example">Normal binding: {{name}}</p>
            </div>
            <br />
         </div>
        <code ng-non-bindable>
            Normal binding: {{name}} <br />
            One time binding: {{::name}}
        </code><br />
        <p>An expression that starts with :: is considered a one-time expression. One-time expressions will stop recalculating once they are stable. </p>

        <div>
            <h3>Filters</h3>

            <div ng-controller="FilterController as ctrl">
                <div>
                    All entries:
                    <span ng-repeat="entry in ctrl.array">{{entry.name}} </span>
                </div>
                <div>
                    Entries that contain an "t":
                    <span ng-repeat="entry in ctrl.filteredArray">{{entry.name}} </span>
                </div>
            </div>
            <br />


            <code ng-non-bindable>
                angular.module('oneTimeBidingExampleApp', []).<br />
                function (filterFilter) {<br />
                &emsp;this.array = [<br />
                &emsp;&emsp;{ name: 'Patro' },<br />
                &emsp;&emsp;{ name: 'Shriyan' },<br />
                &emsp;&emsp;{ name: 'Mahaley' },<br />
                &emsp;&emsp;{ name: 'Tiwary' },<br />
                &emsp;&emsp;{ name: 'Tripathy' }<br />
                &emsp;];<br />
                &emsp;this.filteredArray = filterFilter(this.array, 't');<br />

            </code><br />
            <p>This filter reduces arrays into sub arrays based on conditions. 
            The filter can be applied in the view template with markup like {{ctrl.array | filter:'a'}}, 
            which would do a fulltext search for "a". 
            However, using a filter in a view template will reevaluate the filter on every digest, 
            which can be costly if the array is big.</p>
            <br />


            <h3>Custom Filters</h3>
            <div ng-controller="MyController">
                <input ng-model="greeting" type="text"><br>
                No filter: {{greeting}}<br>
                Reverse: {{greeting|reverse}}<br>
                Reverse + uppercase: {{greeting|reverse:true}}<br>
            </div><br />

            <code ng-non-bindable>
                angular.module('oneTimeBidingExampleApp', []).<br />
                filter('reverse', function () {<br />
                &emsp;return function (input, uppercase) {<br />
                &emsp;&emsp;input = input || '';<br />
                &emsp;&emsp;var out = "";<br />
                &emsp;&emsp;for (var i = 0; i < input.length; i++) {<br />
                &emsp;&emsp;out = input.charAt(i) + out;<br />
                &emsp;}<br />
                &emsp;if (uppercase) {<br />
                &emsp;&emsp;out = out.toUpperCase();<br />
                &emsp;}<br />
                return out;<br />
                };<br />
                }).controller('MyController', ['$scope', function ($scope) {<br />
                &emsp;$scope.greeting = 'hello';<br />
                }]);<br />

            </code><br />
            <p>
                For writing a new filter, I registered a new filter factory function with your module. 
                Internally, this uses the filterProvider. This factory function should return a new filter 
                function which takes the input value as the first argument. 
                Any filter arguments are passed in as additional arguments to the filter function.
            </p>
            <br />
           

            <br />
        </div>

        <h3> View Source : </h3>
        <a href="../../fileview/Default.aspx?~/experiments/week04/week405.htm" target="_blank"> HTML </a><br />
        <a href="../../fileview/Default.aspx?~/experiments/css/week401.css" target="_blank"> CSS </a><br />
        <a href="../../fileview/Default.aspx?~/experiments/js/week34.js" target="_blank"> JS </a>
        <p>
            <h3> Reference :</h3>
            <a href="https://angularjs.org/" target="_blank"> Angular JS </a><br />
        </p>

        <hr />
    </div>
    


</body>
</html>